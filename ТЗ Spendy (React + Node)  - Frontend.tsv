Компоненти	Завдання
Базові завдання	
	Поміняти фавікон і назву додатку на Money Guard
	Створити глобальні змінні для стилізації компонентів, які слід використовувати в проєкті
	Підключити шрифти
	Організувати роботу redux
	Реалізувати зберігання в localStorage токена авторизованого користувача за допомогою бібліотеки redux-persisit click
App	
	Написати операцію, яка робить запит за поточними даними користувача
	Реалізувати логіку приватних і публічних маршрутів
RegistrationPage            /register	Верстка мобілка, планшет, десктоп
	Забезпечити необхідне позиціонування елементів на сторінці
	Рендерить компонент RegistrationForm
RegistrationForm	Верстка мобілка, планшет, десктоп
	RegistrationForm включає Email, Password, Confirm password, ProgressBar і кнопку типу "submit" - "Register".  По кліку на кнопку повинна відбутись вілідація полів форми за допомогою бібліотек Formik+Yup.  Валідація полів повинна відбуватись відповідно до документації бекенду.
	ProgressBar є індикатором заповненості поля Confirm password і його відповідності полю Password і реалізується за допомогою бібліотеки click 
	По результату валідації : - у разі наявності помилок валідації - біля відповідних полів форми потрібно вивести повідомлення з суттю помилки і заблокувати відправку запиту з форми на backend.  - у разі, якщо всі значення валідні, - дані слід відправити на backend. - якщо backend повернув помилку - необхідно її обробити і відобразити користувачеві у вигляді пуш-повідомлення.  - якщо запит на backend пройшов успішно і дані про користувача отримано - необхідно реалізувати автоматичну авторизацію і переадресувати користувача на приватну сторінку DashboardPage
	Елемент навігації "Log in" слід реалізувати як компонент Link, використовуючи бібліотеку react-router-dom click,  який перенаправляє користувача на LoginPage.
LoginPage                       /login	Верстка мобілка, планшет, десктоп
	Забезпечити необхідне позиціонування елементів на сторінці
	Рендерить компонент LoginForm
LoginForm	Верстка мобілка, планшет, десктоп
	LoginForm включає Email, Password і кнопку типу  "submit" - "Log in".  По кліку на кнопку повинна відбутись вілідація полів форми за допомогою бібліотек Formik+Yup.  Валідація полів повинна відбуватись відповідно до документації бекенду.
	По результату валідації : - у разі наявності помилок валідації - біля відповідних полів форми потрібно вивести повідомлення з суттю помилки і заблокувати відправку запиту з форми на backend.  - у разі, якщо всі значення валідні, - дані слід відправити на backend. - якщо backend повернув помилку - необхідно її обробити і відобразити користувачеві у вигляді пуш-повідомлення.  - якщо запит на backend пройшов успішно і дані про користувача отримано - необхідно реалізувати автоматичну авторизацію і переадресувати користувача на приватну сторінку DashboardPage
	Посилання "Register" слід реалізувати як компонент Link, використовуючи бібліотеку react-router-dom click, який перенаправляє користувача на RegistrationPage.
UserAcountLayout	Верстка мобілка, планшет, десктоп
	Компонент обгортка, що вміщає в себе основні блоки(компоненти) сторінки авторизованого юзера: -Header - хедер сторінки -Sidebar - боковий блок -основний контент сторінки, що буде змінюватись в залежності від маршруту.
Header	Верстка мобілка, планшет, десктоп
	Містить в собі: логотип компанії, ім'я користувача та кнопку Exit Клік на кнопку Exit повинно відкриватись модальне вікно для підтвердження/відміни даної операції за допомогою кнопок:  - Log out - надсилає запит на backend, що видаляє активну сесію користувача,  - Cancel - відміняє дану операцію і закриває модалку. Незалежно від відповіді backenda користувача слід розлогінити "на клієнті", очистивши при цьому redux store і localStorage, закрити модлку і переадресувати на сторінку LoginPage  Якщо backend повернув помилку - її додатково необхідно обробити і відобразити як пуш повідомлення.
Sidebar	Верстка мобілка, планшет, десктоп
	Включає в себе компоненти:  - Navigation - блок навігагації  - Ballance - блок відображення балансу юзера  - Currency - блок відображення валюти. На моб. версії повинен відкриватись на окремому маршруті.
Navigation	Верстка мобілка, планшет, десктоп
	Є списком елементів навігації NavLink, що містить такі маршрути:  / - переадресовує на HomeTab (активна за замовчуванням)  /statistics - переадресовує на StatisticsTab  /currency - переадресовує на CurrencyTab (для мобілки)
Balance	Верстка мобілка, планшет, десктоп
	Компонент підписаний на redux store і рендерить дані про баланс користувача. Значення балансу повинно змінюватись кожого разу коли відбувається додавання, видалення або оновлення транзакції. Значення відповідно до доданої, видаленої або оновленої транзакції повинно збільшуватись або зменшуватись в залежності від її типу витрати/доходи.
Currency	Верстка мобілка, планшет, десктоп
	Компонент виконує запит на API Monobank click за поточним курсом валют.  Для оптимізації запитів, отримані дані про курс валют і дату/час останнього запиту слід записувати в localStorage, і, виходячи з цієї інформації, не робити запит протягом години. Тобто наступний запит виконувати лише у випадку, якщо поточний час в порівнянні зі збереженим становить більше години.
HomeTab                         /	Верстка мобілка, планшет, десктоп
	Компнент містить в собі: - TransactionsList - блок зі списком транзакцій - ButtonAddTransaction - кнопку для відкриття модалки ModalAddTransaction - ModalAddTransaction - модалка для створення транзакції Компонент виконує запит за транзакціями авторизованого користувача і записує результат у redux store Компонент виконує запит за категоріями транзакцій і записує результат у redux store
TransactionsList	Верстка мобілка, планшет, десктоп
	Компонент рендерить список компонентів TransactionsItem. Якщо загальне число транзакцій не вміщається в контейнер, необхідно відобразити користувачеві смугу прокрутки. Якщо дані про транзакції користувача відсутні, необхідно відобразити текст-заглушку.  Для мобільних девайсів компонент TransactionsList слід реалізувати як список карток транзакцій, кожна з яких додатково підсвічується кольором, як показано на макеті, в залежності від типу транзакції.
TransactionsItem	Верстка мобілка, планшет, десктоп
	TransactionsItem містить в собі:    - дату транзакції   - тип транзакції   - категорію транзакції   - коментар до транзакції   - суму транзакції   - кнопку для відкриття модалки редагування транзакції - у вигляді іконки-олівця, по кліку на яку повинно відкриватися модальне вікно з формою редагування транзакції ModalEditTranssaction   - кнопку "Delete", - по кліку на дану кнопку повинно відкриватись модальне вікно для підтвердження/відміни даної операції за допомогою кнопок:       - Delete - надсилає запит на backend, що видаляє дану транзакцію,       - Cancel - відміняє дану операцію і закриває модалку.
	Після успішного редагування або видалення транзакції дані в TransactionsList і Balance повинні змінитися без перезавантаження сторінки.
ButtonAddTransaction	Верстка мобілка, планшет, десктоп
	На мобілці кнопка повинна бути зафіксована в правому нижньому кутку екрана, як показано на макеті. По кліку на кнопку має відкриватися модальне вікно з формою створення транзакції ModalAddTranssaction
ModalAddTransaction	Верстка мобілка, планшет, десктоп
	Компонент містить в:   - AddTransactionForm - компонент форми для вводу та відправки даних по транзакції юзера. Модальне вікно повинно закриватись:   - по кліку на кнопку у вигляді хрестика,  - кліку кнопку "Cancel",  - кліку на backdrop,  - натисканням на клавішу Escape.
AddTransactionForm	Верстка мобілка, планшет, десктоп
	Компонент містить в собі:   - перемикач для вибору типу транзакції,  - поле для вводу суми  - елемент для відкриття інтерфейсу з вибором дати  - випадаючий список для вибору категрії (присутній лише транзакції з типом витрати)  - поле для вводу коментаря  - кнопку Add(type="submit") для відправки форми По кліку на кнопку повинна відбутись вілідація полів форми за допомогою бібліотек Formik+Yup. По результату валідації : - у разі наявності помилок валідації - біля відповідних полів форми потрібно вивести повідомлення з суттю помилки і заблокувати відправку запиту з форми на backend.  - у разі, якщо всі значення валідні, - дані слід відправити на backend. - якщо backend повернув помилку - необхідно її обробити і відобразити користувачеві у вигляді пуш-повідомлення.  - якщо запит на backend пройшов успішно:    - модалка повинна закритись,    - запис про створену транзакцію повинен з'явитись на початку списку з транзакціями,    - повинно збільшитись або зменшитись значення балансу в залежності від типу транзакції.  Тип транзакції за замовчуванням - "витрати". Дата за замовчуванням - поточна дата.  Валідація полів повинна відбуватись відповідно до документації бекенду. Елемент для вибору дати слід реалізувати за допомогою бібліотеки reactdatepicker click
ModalEditTransaction	Верстка мобілка, планшет, десктоп
	Компонент містить в собі:   - EditTransactionForm - компонент форми для вводу та відправки даних по транзакції юзера. Модальне вікно повинно закриватись:   - по кліку на кнопку у вигляді хрестика,  - кліку кнопку "Cancel",  - кліку на backdrop,  - натисканням на клавішу Escape.
EditTransactionForm	Верстка мобілка, планшет, десктоп
	"Компонент містить в собі:   - перемикач для вибору типу транзакції,  - поле для вводу суми  - елемент для відкриття інтерфейсу з вибором дати  - випадаючий список для вибору категрії  - поле для вводу коментаря  - кнопку Add(type=""submit"") для відправки форми По кліку на кнопку повинна відбутись вілідація полів форми за допомогою бібліотек Formik+Yup. По результату валідації : - у разі наявності помилок валідації - біля відповідних полів форми потрібно вивести повідомлення з суттю помилки і заблокувати відправку запиту з форми на backend.  - у разі, якщо всі значення валідні, - дані слід відправити на backend. - якщо backend повернув помилку - необхідно її обробити і відобразити користувачеві у вигляді пуш-повідомлення.  - якщо запит на backend пройшов успішно:    - модалка повинна закритись,    - запис про створену транзакцію повинен з'явитись на початку списку з транзакціями,    - повинно збільшитись або зменшитись значення балансу в залежності від типу транзакції.  За замовчуванням всі поля приймають відповідні значення транзакції, яка редегується. Тип транзакції повинен бути заблокованим для зміни.  Валідація полів повинна відбуватись відповідно до документації бекенду. Елемент для вибору дати слід реалізувати за допомогою бібліотеки reactdatepicker click
StatisticsTab                   /statistics	Верстка мобілка, планшет, десктоп
	Компонент виконує запит за статистикою транзакцій авторизованого користувача за поточний місяць в залежності від обраного типу і записує результат у redux store
	Компонент містить:   - Toggle - перемикач для змніи типу транзакцій   - Chart - графік сум транзакцій по категоріям   - StatisticsDashboard - елемент для вибору періоду дат   - StatisticsTable - список сум транзакцій по категоріям
Toggle	Верстка мобілка, планшет, десктоп
	Компонент змінює тип транзакцій доходи/витрати, інформація стосовно яких відображається на сторінці. За замовчуванням активним повинен бути увімкненим тип витрати
Chart	Верстка мобілка, планшет, десктоп
	Відображає графік усіх витрат за період в залежності від обраного типу і актуалізує дані в разі зміни місяця або року в StatisticsDashboard. Графік має бути реалізований за допомогою бібліотеки Rechars click 
StatisticsDashboard	Верстка мобілка, планшет, десктоп
	Складається з двох селектів, за допомогою яких користувач може вибрати період, за який хоче отримати статистику за транзакціями.  У разі зміни місяця або року необхідно робити запит на backend за статистикою транзакцій за обраний період
StatisticsTable	Верстка мобілка, планшет, десктоп
	Відображає список категорій транзакцій та їх загальний підсумок за обраний період в залежності від обраного типу доходи/витрати
CurrencyTab                   /currency	Верстка мобілка
	Сторінка, якка відображається лише на мобілній версії. Компонент виконує запит на API Monobank click за поточним курсом валют.  Для оптимізації запитів, отримані дані про курс валют і дату/час останнього запиту слід записувати в localStorage, і, виходячи з цієї інформації, не робити запит протягом години. Тобто наступний запит виконувати лише у випадку, якщо поточний час в порівнянні зі збереженим становить більше години.
Loader	Верстка мобілка, планшет, десктоп
	Повинен перебувати в центрі екрана. З'являється, коли йде завантаження асинхронних даних Loader підключений до компонента App і реагує на зміну прапора redux store (global.isLoading) Для реалізації слід використовувати бібліотеку react-loader-spinner click  або іншу аналогічну бібліотеку
	
	
ДОДАТКОВЕ ЗАВДАННЯ (виконувати за умови, що реалізовано всі основні завдання)	
Header	Верстка мобілка, планшет, десктоп
	Складається з:  - кнопки з зображенням аватару, якщо аватар було заантажено, або -першої літери імені юзера в верхньому регістрі, якщо аватар ще не було завантажено. Клік в кнопку відкриває модалку UserModal.
UserModal	Верстка мобілка, планшет, десктоп
	Складається з елементів:   -для вибору файлу з аватаром,  -поля для вводу імені юзера,  -кнопки закриття модалки,  -кнопки відправки запиту на збереження. Елемент для вибору аватару за замовчування відображає поточний аватар або відповідне "зображення-заглушку". При виборі файлу з зображенням, нове зображення повинно замінити поточне ще до відправки запиту на збереження. В полі для вводу імені за замовчуванням повинно бути поточне значення імені юзера. Після натискання на кнопку збереження повинна відбуватись перевірка введених даних на валідність:   -у разі, якщо вони не валідні біля відповідних полів повинно відображатись повідомлення з суттю помилки валідації,  -у раз, якщо дані валідні, повинен відбутись запит на бекенд. Клік по кнопці для закриття модалки, клік по бекдропу, а також натискання на клавішу Escape повнні закривати модалку.
AddTransactionForm	Верстка мобілка, планшет, десктоп
	Компонент містить в собі:   - випадаючий список для вибору категорії (присутній на формах обидвох типів транзакцій)